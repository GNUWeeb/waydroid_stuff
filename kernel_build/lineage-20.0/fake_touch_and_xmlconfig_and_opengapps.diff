
project device/waydroid/waydroid/
diff --git a/BoardConfig.mk b/BoardConfig.mk
index bd94b45..b502a99 100644
--- a/BoardConfig.mk
+++ b/BoardConfig.mk
@@ -40,6 +40,7 @@ TARGET_NO_BOOTLOADER := true
 TARGET_USES_HWC2 := true
 ifneq ($(TARGET_USE_MESA),false)
 BOARD_MESA3D_USES_MESON_BUILD := true
+BOARD_MESA3D_MESON_ARGS := -Dallow-kcmp=enabled -Dintel-xe-kmd=enabled -Dxmlconfig=enabled
 BOARD_MESA3D_BUILD_LIBGBM := true
 BOARD_MESA3D_GALLIUM_DRIVERS := kmsro r300 r600 nouveau freedreno swrast v3d vc4 etnaviv tegra svga virgl panfrost lima radeonsi
 BOARD_MESA3D_VULKAN_DRIVERS := broadcom freedreno panfrost swrast virtio amd
diff --git a/device.mk b/device.mk
index 56f2e46..d02ddb7 100644
--- a/device.mk
+++ b/device.mk
@@ -213,3 +213,7 @@ endif
 # Updater
 PRODUCT_PACKAGES += \
     WaydroidUpdater
+
+# GAPPS
+GAPPS_VARIANT := pico
+$(call inherit-product, vendor/opengapps/build/opengapps-packages.mk)

project external/mesa/
diff --git a/android/Android.mk b/android/Android.mk
index 377aeb3a791..eb5039e3f82 100644
--- a/android/Android.mk
+++ b/android/Android.mk
@@ -39,10 +39,10 @@ MESA_VK_LIB_SUFFIX_swrast := lvp
 
 include $(CLEAR_VARS)
 
-LOCAL_SHARED_LIBRARIES := libc libdl libdrm libm liblog libcutils libz libc++ libnativewindow libsync libhardware
+LOCAL_SHARED_LIBRARIES := libc libdl libdrm libm liblog libcutils libz libc++ libnativewindow libsync libhardware libxml2
 LOCAL_STATIC_LIBRARIES := libexpat libarect libelf
 LOCAL_HEADER_LIBRARIES := libnativebase_headers hwvulkan_headers
-MESON_GEN_PKGCONFIGS := cutils expat hardware libdrm:$(LIBDRM_VERSION) nativewindow sync zlib:1.2.11 libelf
+MESON_GEN_PKGCONFIGS := cutils expat hardware libdrm:$(LIBDRM_VERSION) nativewindow sync zlib:1.2.11 libelf libxml2
 LOCAL_CFLAGS += $(BOARD_MESA3D_CFLAGS)
 
 ifneq ($(filter swrast,$(BOARD_MESA3D_GALLIUM_DRIVERS) $(BOARD_MESA3D_VULKAN_DRIVERS)),)
diff --git a/meson.build b/meson.build
index 8963b314256..792c1b9f470 100644
--- a/meson.build
+++ b/meson.build
@@ -1573,7 +1573,7 @@ if dep_thread.found()
 endif
 
 with_expat = get_option('expat') \
-  .disable_auto_if(with_platform_android or with_platform_windows)
+  .disable_auto_if(with_platform_windows)
 
 if host_machine.system() == 'darwin'
   dep_expat = meson.get_compiler('c').find_library('expat', required : with_expat)
@@ -1589,8 +1589,8 @@ endif
 
 # We don't require expat on Android or Windows
 use_xmlconfig = get_option('xmlconfig') \
-  .require(not (with_platform_android or with_platform_windows),
-           error_message : 'xmlconfig not available on Android or Windows') \
+  .require(not (with_platform_windows),
+           error_message : 'xmlconfig not available on Windows') \
   .require(dep_expat.found(),
            error_message : 'requires expat') \
   .allowed()
diff --git a/src/util/xmlconfig.c b/src/util/xmlconfig.c
index 8269f022940..f6e1e7ad61b 100644
--- a/src/util/xmlconfig.c
+++ b/src/util/xmlconfig.c
@@ -1165,6 +1165,21 @@ initOptionCache(driOptionCache *cache, const driOptionCache *info)
    }
 }
 
+#ifdef __ANDROID__
+#define SYSCONFDIR "/vendor/etc"
+#define DATADIR "/data/vendor"
+#else
+
+#ifndef SYSCONFDIR
+#define SYSCONFDIR "/etc"
+#endif
+
+#ifndef DATADIR
+#define DATADIR "/usr/share"
+#endif
+
+#endif /* __ANDROID__ */
+
 static const char *execname;
 
 void

project frameworks/base/
diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index 4578eecd7d45..aee5b4cf6e3e 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -5493,6 +5493,11 @@ public final class Settings {
         @Readable
         public static final String EGG_MODE = "egg_mode";
 
+        /**
+         * @hide
+         */
+        public static final String FORCE_MOUSE_AS_TOUCH = "force_mouse_as_touch";
+
         /**
          * Setting to determine whether or not to show the battery percentage in the status bar.
          *    0 - Don't show percentage
@@ -5660,6 +5665,7 @@ public final class Settings {
             PRIVATE_SETTINGS.add(DISPLAY_COLOR_MODE);
             PRIVATE_SETTINGS.add(DISPLAY_COLOR_MODE_VENDOR_HINT);
             PRIVATE_SETTINGS.add(DESKTOP_MODE);
+            PRIVATE_SETTINGS.add(FORCE_MOUSE_AS_TOUCH);
         }
 
         /**
@@ -5674,6 +5680,7 @@ public final class Settings {
             CLONE_TO_MANAGED_PROFILE.add(SOUND_EFFECTS_ENABLED);
             CLONE_TO_MANAGED_PROFILE.add(TEXT_SHOW_PASSWORD);
             CLONE_TO_MANAGED_PROFILE.add(TIME_12_24);
+            CLONE_TO_MANAGED_PROFILE.add(FORCE_MOUSE_AS_TOUCH);
         }
 
         /** @hide */
diff --git a/services/core/java/com/android/server/input/InputManagerService.java b/services/core/java/com/android/server/input/InputManagerService.java
index f37a7f9e99cd..4b75291bfa16 100644
--- a/services/core/java/com/android/server/input/InputManagerService.java
+++ b/services/core/java/com/android/server/input/InputManagerService.java
@@ -490,6 +490,7 @@ public class InputManagerService extends IInputManager.Stub
         Watchdog.getInstance().addMonitor(this);
 
         registerPointerSpeedSettingObserver();
+        registerForceMouseAsTouchSettingObserver();
         registerShowTouchesSettingObserver();
         registerAccessibilityLargePointerSettingObserver();
         registerLongPressTimeoutObserver();
@@ -501,6 +502,7 @@ public class InputManagerService extends IInputManager.Stub
             @Override
             public void onReceive(Context context, Intent intent) {
                 updatePointerSpeedFromSettings();
+                updateForceMouseAsTouchFromSettings();
                 updateShowTouchesFromSettings();
                 updateAccessibilityLargePointerFromSettings();
                 updateDeepPressStatusFromSettings("user switched");
@@ -509,6 +511,7 @@ public class InputManagerService extends IInputManager.Stub
         }, new IntentFilter(Intent.ACTION_USER_SWITCHED), null, mHandler);
 
         updatePointerSpeedFromSettings();
+        updateForceMouseAsTouchFromSettings();
         updateShowTouchesFromSettings();
         updateAccessibilityLargePointerFromSettings();
         updateDeepPressStatusFromSettings("just booted");
@@ -1860,6 +1863,14 @@ public class InputManagerService extends IInputManager.Stub
                 properties -> properties.pointerIconVisible = visible);
     }
 
+    private void updateForceMouseAsTouchFromSettings() {
+        boolean forceMouseAsTouch = getForceMouseAsTouchSetting();
+        setForceMouseAsTouchUnchecked(forceMouseAsTouch);
+    }
+
+    private void setForceMouseAsTouchUnchecked(boolean forceMouseAsTouch) {
+        mNative.setForceMouseAsTouch(forceMouseAsTouch);
+    }
+
     private void registerPointerSpeedSettingObserver() {
         mContext.getContentResolver().registerContentObserver(
                 Settings.System.getUriFor(Settings.System.POINTER_SPEED), true,
@@ -1881,6 +1892,26 @@ public class InputManagerService extends IInputManager.Stub
         return speed;
     }
 
+    private void registerForceMouseAsTouchSettingObserver() {
+        mContext.getContentResolver().registerContentObserver(
+                Settings.System.getUriFor(Settings.System.FORCE_MOUSE_AS_TOUCH), true,
+                new ContentObserver(mHandler) {
+                    @Override
+                    public void onChange(boolean selfChange) {
+                        updateForceMouseAsTouchFromSettings();
+                    }
+                }, UserHandle.USER_ALL);
+    }
+
+    private boolean getForceMouseAsTouchSetting() {
+        boolean forceMouseAsTouch = false;
+        try {
+            forceMouseAsTouch = Settings.System.getIntForUser(mContext.getContentResolver(),
+                    Settings.System.FORCE_MOUSE_AS_TOUCH, UserHandle.USER_CURRENT) > 0;
+        } catch (SettingNotFoundException ignored) {
+        }
+        return forceMouseAsTouch;
+    }
+
     private void updateShowTouchesFromSettings() {
         int setting = getShowTouchesSetting(0);
         mNative.setShowTouches(setting != 0);
diff --git a/services/core/java/com/android/server/input/NativeInputManagerService.java b/services/core/java/com/android/server/input/NativeInputManagerService.java
index 32b2940b8111..4a66a6e78ed0 100644
--- a/services/core/java/com/android/server/input/NativeInputManagerService.java
+++ b/services/core/java/com/android/server/input/NativeInputManagerService.java
@@ -111,6 +111,8 @@ public interface NativeInputManagerService {
 
     void setPointerAcceleration(float acceleration);
 
+    void setForceMouseAsTouch(boolean forceMouseAsTouch);
+
     void setShowTouches(boolean enabled);
 
     void setVolumeKeysRotation(int mode);
@@ -291,6 +293,9 @@ public interface NativeInputManagerService {
         @Override
         public native void setPointerAcceleration(float acceleration);
 
+        @Override
+        public native void setForceMouseAsTouch(boolean forceMouseAsTouch);
+
         @Override
         public native void setShowTouches(boolean enabled);
 
diff --git a/services/core/jni/com_android_server_input_InputManagerService.cpp b/services/core/jni/com_android_server_input_InputManagerService.cpp
index c051a120a4bb..2b536cd19aaf 100644
--- a/services/core/jni/com_android_server_input_InputManagerService.cpp
+++ b/services/core/jni/com_android_server_input_InputManagerService.cpp
@@ -279,6 +279,7 @@ public:
     void setPointerDisplayId(int32_t displayId);
     void setPointerSpeed(int32_t speed);
     void setPointerAcceleration(float acceleration);
+    void setForceMouseAsTouch(bool forceMouseAsTouch);
     void setInputDeviceEnabled(uint32_t deviceId, bool enabled);
     void setShowTouches(bool enabled);
     void setVolumeKeysRotation(int mode);
@@ -367,6 +368,9 @@ private:
         // Pointer acceleration.
         float pointerAcceleration;
 
+        // Force mouse events to be handled as touch event.
+        bool forceMouseAsTouch;
+
         // True if pointer gestures are enabled.
         bool pointerGesturesEnabled;
 
@@ -419,6 +423,7 @@ NativeInputManager::NativeInputManager(jobject contextObj,
         mLocked.systemUiLightsOut = false;
         mLocked.pointerSpeed = 0;
         mLocked.pointerAcceleration = android::os::IInputConstants::DEFAULT_POINTER_ACCELERATION;
+        mLocked.forceMouseAsTouch = false;
         mLocked.pointerGesturesEnabled = true;
         mLocked.showTouches = false;
         mLocked.pointerDisplayId = ADISPLAY_ID_DEFAULT;
@@ -448,6 +453,7 @@ void NativeInputManager::dump(std::string& dump) {
                              toString(mLocked.systemUiLightsOut));
         dump += StringPrintf(INDENT "Pointer Speed: %" PRId32 "\n", mLocked.pointerSpeed);
         dump += StringPrintf(INDENT "Pointer Acceleration: %0.3f\n", mLocked.pointerAcceleration);
+        dump += StringPrintf(INDENT "Force Mouse As Touch: %s\n", toString(mLocked.forceMouseAsTouch));
         dump += StringPrintf(INDENT "Pointer Gestures Enabled: %s\n",
                 toString(mLocked.pointerGesturesEnabled));
         dump += StringPrintf(INDENT "Show Touches: %s\n", toString(mLocked.showTouches));
@@ -634,6 +640,7 @@ void NativeInputManager::getReaderConfiguration(InputReaderConfiguration* outCon
         outConfig->pointerVelocityControlParameters.scale = exp2f(mLocked.pointerSpeed
                 * POINTER_SPEED_EXPONENT);
         outConfig->pointerVelocityControlParameters.acceleration = mLocked.pointerAcceleration;
+        outConfig->forceMouseAsTouch = mLocked.forceMouseAsTouch;
         outConfig->pointerGesturesEnabled = mLocked.pointerGesturesEnabled;
 
         outConfig->showTouches = mLocked.showTouches;
@@ -1077,6 +1084,19 @@ void NativeInputManager::setPointerAcceleration(float acceleration) {
             InputReaderConfiguration::CHANGE_POINTER_SPEED);
 }
 
+void NativeInputManager::setForceMouseAsTouch(bool forceMouseAsTouch) {
+    { // acquire lock
+        AutoMutex _l(mLock);
+        if (mLocked.forceMouseAsTouch == forceMouseAsTouch) {
+            return;
+        }
+        ALOGI("Setting force mouse as touch to %s.", toString(forceMouseAsTouch));
+        mLocked.forceMouseAsTouch = forceMouseAsTouch;
+    } // release lock
+    mInputManager->getReader().requestRefreshConfiguration(
+        InputReaderConfiguration::CHANGE_FORCE_MOUSE_AS_TOUCH);
+}
+
 void NativeInputManager::setInputDeviceEnabled(uint32_t deviceId, bool enabled) {
     { // acquire lock
         AutoMutex _l(mLock);
@@ -1890,6 +1910,12 @@ static void nativeSetPointerAcceleration(JNIEnv* env, jobject nativeImplObj, jfl
     im->setPointerAcceleration(acceleration);
 }
 
+static void nativeSetForceMouseAsTouch(JNIEnv* env, jobject nativeImplObj, jboolean forceMouseAsTouch) {
+    NativeInputManager* im = getNativeInputManager(env, nativeImplObj);
+
+    im->setForceMouseAsTouch(forceMouseAsTouch);
+}
+
 static void nativeSetShowTouches(JNIEnv* env, jobject nativeImplObj, jboolean enabled) {
     NativeInputManager* im = getNativeInputManager(env, nativeImplObj);
 
@@ -2374,6 +2400,7 @@ static const JNINativeMethod gInputManagerMethods[] = {
         {"transferTouch", "(Landroid/os/IBinder;I)Z", (void*)nativeTransferTouch},
         {"setPointerSpeed", "(I)V", (void*)nativeSetPointerSpeed},
         {"setPointerAcceleration", "(F)V", (void*)nativeSetPointerAcceleration},
+        {"setForceMouseAsTouch", "(JZ)V", (void*)nativeSetForceMouseAsTouch},
         {"setShowTouches", "(Z)V", (void*)nativeSetShowTouches},
         {"setVolumeKeysRotation", "(I)V", (void*)nativeSetVolumeKeysRotation},
         {"setInteractive", "(Z)V", (void*)nativeSetInteractive},

project frameworks/native/
diff --git a/services/inputflinger/InputReaderBase.cpp b/services/inputflinger/InputReaderBase.cpp
index a864cf8202..f21c20bae8 100644
--- a/services/inputflinger/InputReaderBase.cpp
+++ b/services/inputflinger/InputReaderBase.cpp
@@ -55,6 +55,9 @@ std::string InputReaderConfiguration::changesToString(uint32_t changes) {
     if (changes & CHANGE_SHOW_TOUCHES) {
         result += "SHOW_TOUCHES | ";
     }
+    if (changes & CHANGE_FORCE_MOUSE_AS_TOUCH) {
+        result += "FORCE_MOUSE_AS_TOUCH | ";
+    }
     if (changes & CHANGE_KEYBOARD_LAYOUTS) {
         result += "KEYBOARD_LAYOUTS | ";
     }
diff --git a/services/inputflinger/dispatcher/InputDispatcher.cpp b/services/inputflinger/dispatcher/InputDispatcher.cpp
index c2a3f7a7c2..254d754b8a 100644
--- a/services/inputflinger/dispatcher/InputDispatcher.cpp
+++ b/services/inputflinger/dispatcher/InputDispatcher.cpp
@@ -2016,8 +2016,7 @@ InputEventInjectionResult InputDispatcher::findTouchedWindowTargetsLocked(
 
     bool isSplit = tempTouchState.split;
     bool switchedDevice = tempTouchState.deviceId >= 0 && tempTouchState.displayId >= 0 &&
-            (tempTouchState.deviceId != entry.deviceId || tempTouchState.source != entry.source ||
-             tempTouchState.displayId != displayId);
+            (tempTouchState.deviceId != entry.deviceId || tempTouchState.displayId != displayId);
 
     const bool isHoverAction = (maskedAction == AMOTION_EVENT_ACTION_HOVER_MOVE ||
                                 maskedAction == AMOTION_EVENT_ACTION_HOVER_ENTER ||
diff --git a/services/inputflinger/include/InputReaderBase.h b/services/inputflinger/include/InputReaderBase.h
index 428c0a9855..ae092d6de6 100644
--- a/services/inputflinger/include/InputReaderBase.h
+++ b/services/inputflinger/include/InputReaderBase.h
@@ -188,6 +188,9 @@ struct InputReaderConfiguration {
 
         // All devices must be reopened.
         CHANGE_MUST_REOPEN = 1 << 31,
+
+        // Force mouse as touch setting changed.
+        CHANGE_FORCE_MOUSE_AS_TOUCH = 1 << 90,
     };
 
     // Gets the amount of time to disable virtual keys after the screen is touched
@@ -219,6 +222,9 @@ struct InputReaderConfiguration {
     // True if pointer gestures are enabled.
     bool pointerGesturesEnabled;
 
+    // True if pointer touch emulation is enabled.
+    bool forceMouseAsTouch;
+
     // Quiet time between certain pointer gesture transitions.
     // Time to allow for all fingers or buttons to settle into a stable state before
     // starting a new gesture.
@@ -302,6 +308,7 @@ struct InputReaderConfiguration {
                                                              DEFAULT_POINTER_ACCELERATION)),
             wheelVelocityControlParameters(1.0f, 15.0f, 50.0f, 4.0f),
             pointerGesturesEnabled(true),
+            forceMouseAsTouch(false),
             pointerGestureQuietInterval(100 * 1000000LL),            // 100 ms
             pointerGestureDragMinSwitchSpeed(50),                    // 50 pixels per second
             pointerGestureTapInterval(150 * 1000000LL),              // 150 ms
diff --git a/services/inputflinger/reader/InputReader.cpp b/services/inputflinger/reader/InputReader.cpp
index 9bcf463c36..0778809a7c 100644
--- a/services/inputflinger/reader/InputReader.cpp
+++ b/services/inputflinger/reader/InputReader.cpp
@@ -848,6 +848,7 @@ void InputReader::dump(std::string& dump) {
                          mConfig.wheelVelocityControlParameters.highThreshold,
                          mConfig.wheelVelocityControlParameters.acceleration);
 
+    dump += StringPrintf(INDENT2 "PointerTouchEmulation: %s\n", toString(mConfig.forceMouseAsTouch));
     dump += StringPrintf(INDENT2 "PointerGesture:\n");
     dump += StringPrintf(INDENT3 "Enabled: %s\n", toString(mConfig.pointerGesturesEnabled));
     dump += StringPrintf(INDENT3 "QuietInterval: %0.1fms\n",
diff --git a/services/inputflinger/reader/mapper/CursorInputMapper.cpp b/services/inputflinger/reader/mapper/CursorInputMapper.cpp
index 396b09d453..3cb8f4567f 100644
--- a/services/inputflinger/reader/mapper/CursorInputMapper.cpp
+++ b/services/inputflinger/reader/mapper/CursorInputMapper.cpp
@@ -172,7 +172,11 @@ void CursorInputMapper::configure(nsecs_t when, const InputReaderConfiguration*
                 mParameters.mode = Parameters::Mode::POINTER;
                 [[fallthrough]];
             case Parameters::Mode::POINTER:
-                mSource = AINPUT_SOURCE_MOUSE;
+                if (config->forceMouseAsTouch) {
+                    mSource = AINPUT_SOURCE_TOUCHSCREEN;
+                } else {
+                    mSource = AINPUT_SOURCE_MOUSE;
+                }
                 mXPrecision = 1.0f;
                 mYPrecision = 1.0f;
                 mXScale = 1.0f;
@@ -234,6 +238,17 @@ void CursorInputMapper::configure(nsecs_t when, const InputReaderConfiguration*
         }
     }
 
+    if (!changes || (changes & InputReaderConfiguration::CHANGE_FORCE_MOUSE_AS_TOUCH)) {
+        if (mParameters.mode == Parameters::Mode::POINTER_RELATIVE) {
+            // Disable touch emulation for the pointer when Pointer Capture is enabled.
+            mSource = AINPUT_SOURCE_MOUSE_RELATIVE;
+        } else if (config->forceMouseAsTouch) {
+            mSource = AINPUT_SOURCE_TOUCHSCREEN;
+        } else {
+            mSource = AINPUT_SOURCE_MOUSE;
+        }
+    }
+
     if (!changes || (changes & InputReaderConfiguration::CHANGE_DISPLAY_INFO) ||
         configurePointerCapture) {
         const bool isPointer = mParameters.mode == Parameters::Mode::POINTER;
@@ -381,7 +396,7 @@ void CursorInputMapper::sync(nsecs_t when, nsecs_t readTime) {
 
     float xCursorPosition = AMOTION_EVENT_INVALID_CURSOR_POSITION;
     float yCursorPosition = AMOTION_EVENT_INVALID_CURSOR_POSITION;
-    if (mSource == AINPUT_SOURCE_MOUSE) {
+    if (mSource == AINPUT_SOURCE_MOUSE || mSource == AINPUT_SOURCE_TOUCHSCREEN) {
         if (moved || scrolled || buttonsChanged) {
             mPointerController->setPresentation(PointerControllerInterface::Presentation::POINTER);
 
@@ -437,7 +452,7 @@ void CursorInputMapper::sync(nsecs_t when, nsecs_t readTime) {
         int32_t motionEventAction;
         if (downChanged) {
             motionEventAction = down ? AMOTION_EVENT_ACTION_DOWN : AMOTION_EVENT_ACTION_UP;
-        } else if (down || (mSource != AINPUT_SOURCE_MOUSE)) {
+        } else if (down || (mSource != AINPUT_SOURCE_MOUSE && mSource != AINPUT_SOURCE_TOUCHSCREEN)) {
             motionEventAction = AMOTION_EVENT_ACTION_MOVE;
         } else {
             motionEventAction = AMOTION_EVENT_ACTION_HOVER_MOVE;
@@ -488,7 +503,7 @@ void CursorInputMapper::sync(nsecs_t when, nsecs_t readTime) {
         ALOG_ASSERT(buttonState == currentButtonState);
 
         // Send hover move after UP to tell the application that the mouse is hovering now.
-        if (motionEventAction == AMOTION_EVENT_ACTION_UP && (mSource == AINPUT_SOURCE_MOUSE)) {
+        if (motionEventAction == AMOTION_EVENT_ACTION_UP && (mSource == AINPUT_SOURCE_MOUSE || mSource == AINPUT_SOURCE_TOUCHSCREEN)) {
             NotifyMotionArgs hoverArgs(getContext()->getNextId(), when, readTime, getDeviceId(),
                                        mSource, *mDisplayId, policyFlags,
                                        AMOTION_EVENT_ACTION_HOVER_MOVE, 0, 0, metaState,

project vendor/opengapps/build/
diff --git a/CleanSpec.mk b/CleanSpec.mk
new file mode 100644
index 0000000..50b8df1
--- /dev/null
+++ b/CleanSpec.mk
@@ -0,0 +1,2 @@
+$(call add-clean-step, rm -rf $(PRODUCT_OUT)/system/app/*)
+$(call add-clean-step, rm -rf $(PRODUCT_OUT)/system/priv-app/*)
diff --git a/modules/Android.mk b/modules/Android.mk
new file mode 100644
index 0000000..03d69cf
--- /dev/null
+++ b/modules/Android.mk
@@ -0,0 +1 @@
+include $(call all-named-subdir-makefiles,$(GAPPS_PRODUCT_PACKAGES))
